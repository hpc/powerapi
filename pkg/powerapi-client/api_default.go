/*
 * Power API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package powerapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type DefaultApi interface {

	/*
	 * AggregationServiceActionsAggregationServiceResetPost Request aggregate system reset
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiAggregationServiceActionsAggregationServiceResetPostRequest
	 */
	AggregationServiceActionsAggregationServiceResetPost(ctx _context.Context) ApiAggregationServiceActionsAggregationServiceResetPostRequest

	/*
	 * AggregationServiceActionsAggregationServiceResetPostExecute executes the request
	 * @return AggregationResetBody
	 */
	AggregationServiceActionsAggregationServiceResetPostExecute(r ApiAggregationServiceActionsAggregationServiceResetPostRequest) (AggregationResetBody, *_nethttp.Response, error)

	/*
	 * ComputerSystemsGet Get computer systems
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiComputerSystemsGetRequest
	 */
	ComputerSystemsGet(ctx _context.Context) ApiComputerSystemsGetRequest

	/*
	 * ComputerSystemsGetExecute executes the request
	 * @return ComputerSystemCollection
	 */
	ComputerSystemsGetExecute(r ApiComputerSystemsGetRequest) (ComputerSystemCollection, *_nethttp.Response, error)

	/*
	 * ComputerSystemsNameActionsComputerSystemResetPost Request system reset
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param name Unique name of the computer system
	 * @return ApiComputerSystemsNameActionsComputerSystemResetPostRequest
	 */
	ComputerSystemsNameActionsComputerSystemResetPost(ctx _context.Context, name string) ApiComputerSystemsNameActionsComputerSystemResetPostRequest

	/*
	 * ComputerSystemsNameActionsComputerSystemResetPostExecute executes the request
	 * @return ResetRequestBody
	 */
	ComputerSystemsNameActionsComputerSystemResetPostExecute(r ApiComputerSystemsNameActionsComputerSystemResetPostRequest) (ResetRequestBody, *_nethttp.Response, error)

	/*
	 * ComputerSystemsNameGet Get a specific computer system state
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param name Unique name of the computer system
	 * @return ApiComputerSystemsNameGetRequest
	 */
	ComputerSystemsNameGet(ctx _context.Context, name string) ApiComputerSystemsNameGetRequest

	/*
	 * ComputerSystemsNameGetExecute executes the request
	 * @return ComputerSystem
	 */
	ComputerSystemsNameGetExecute(r ApiComputerSystemsNameGetRequest) (ComputerSystem, *_nethttp.Response, error)
}

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiAggregationServiceActionsAggregationServiceResetPostRequest struct {
	ctx _context.Context
	ApiService DefaultApi
	aggregationResetBody *AggregationResetBody
}

func (r ApiAggregationServiceActionsAggregationServiceResetPostRequest) AggregationResetBody(aggregationResetBody AggregationResetBody) ApiAggregationServiceActionsAggregationServiceResetPostRequest {
	r.aggregationResetBody = &aggregationResetBody
	return r
}

func (r ApiAggregationServiceActionsAggregationServiceResetPostRequest) Execute() (AggregationResetBody, *_nethttp.Response, error) {
	return r.ApiService.AggregationServiceActionsAggregationServiceResetPostExecute(r)
}

/*
 * AggregationServiceActionsAggregationServiceResetPost Request aggregate system reset
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAggregationServiceActionsAggregationServiceResetPostRequest
 */
func (a *DefaultApiService) AggregationServiceActionsAggregationServiceResetPost(ctx _context.Context) ApiAggregationServiceActionsAggregationServiceResetPostRequest {
	return ApiAggregationServiceActionsAggregationServiceResetPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return AggregationResetBody
 */
func (a *DefaultApiService) AggregationServiceActionsAggregationServiceResetPostExecute(r ApiAggregationServiceActionsAggregationServiceResetPostRequest) (AggregationResetBody, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AggregationResetBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.AggregationServiceActionsAggregationServiceResetPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AggregationService/Actions/AggregationService.Reset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aggregationResetBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiComputerSystemsGetRequest struct {
	ctx _context.Context
	ApiService DefaultApi
}


func (r ApiComputerSystemsGetRequest) Execute() (ComputerSystemCollection, *_nethttp.Response, error) {
	return r.ApiService.ComputerSystemsGetExecute(r)
}

/*
 * ComputerSystemsGet Get computer systems
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiComputerSystemsGetRequest
 */
func (a *DefaultApiService) ComputerSystemsGet(ctx _context.Context) ApiComputerSystemsGetRequest {
	return ApiComputerSystemsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ComputerSystemCollection
 */
func (a *DefaultApiService) ComputerSystemsGetExecute(r ApiComputerSystemsGetRequest) (ComputerSystemCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ComputerSystemCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ComputerSystemsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ComputerSystems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiComputerSystemsNameActionsComputerSystemResetPostRequest struct {
	ctx _context.Context
	ApiService DefaultApi
	name string
	resetRequestBody *ResetRequestBody
}

func (r ApiComputerSystemsNameActionsComputerSystemResetPostRequest) ResetRequestBody(resetRequestBody ResetRequestBody) ApiComputerSystemsNameActionsComputerSystemResetPostRequest {
	r.resetRequestBody = &resetRequestBody
	return r
}

func (r ApiComputerSystemsNameActionsComputerSystemResetPostRequest) Execute() (ResetRequestBody, *_nethttp.Response, error) {
	return r.ApiService.ComputerSystemsNameActionsComputerSystemResetPostExecute(r)
}

/*
 * ComputerSystemsNameActionsComputerSystemResetPost Request system reset
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name Unique name of the computer system
 * @return ApiComputerSystemsNameActionsComputerSystemResetPostRequest
 */
func (a *DefaultApiService) ComputerSystemsNameActionsComputerSystemResetPost(ctx _context.Context, name string) ApiComputerSystemsNameActionsComputerSystemResetPostRequest {
	return ApiComputerSystemsNameActionsComputerSystemResetPostRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

/*
 * Execute executes the request
 * @return ResetRequestBody
 */
func (a *DefaultApiService) ComputerSystemsNameActionsComputerSystemResetPostExecute(r ApiComputerSystemsNameActionsComputerSystemResetPostRequest) (ResetRequestBody, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResetRequestBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ComputerSystemsNameActionsComputerSystemResetPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ComputerSystems/{name}/Actions/ComputerSystem.Reset"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if strlen(r.name) < 1 {
		return localVarReturnValue, nil, reportError("name must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resetRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiComputerSystemsNameGetRequest struct {
	ctx _context.Context
	ApiService DefaultApi
	name string
}


func (r ApiComputerSystemsNameGetRequest) Execute() (ComputerSystem, *_nethttp.Response, error) {
	return r.ApiService.ComputerSystemsNameGetExecute(r)
}

/*
 * ComputerSystemsNameGet Get a specific computer system state
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name Unique name of the computer system
 * @return ApiComputerSystemsNameGetRequest
 */
func (a *DefaultApiService) ComputerSystemsNameGet(ctx _context.Context, name string) ApiComputerSystemsNameGetRequest {
	return ApiComputerSystemsNameGetRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

/*
 * Execute executes the request
 * @return ComputerSystem
 */
func (a *DefaultApiService) ComputerSystemsNameGetExecute(r ApiComputerSystemsNameGetRequest) (ComputerSystem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ComputerSystem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ComputerSystemsNameGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ComputerSystems/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if strlen(r.name) < 1 {
		return localVarReturnValue, nil, reportError("name must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
