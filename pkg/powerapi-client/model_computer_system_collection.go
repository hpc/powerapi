/*
 * Power API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: lowell@lanl.gov
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package powerapi

import (
	"encoding/json"
)

// ComputerSystemCollection A collection of computer systems
type ComputerSystemCollection struct {
	// An id is a URI-reference for the object
	Id *string `json:"id,omitempty"`
	// Human-readable name for the collection
	Name *string `json:"name,omitempty"`
	// Collection of ComputerSystem objects
	Systems *[]ComputerSystem `json:"systems,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ComputerSystemCollection ComputerSystemCollection

// NewComputerSystemCollection instantiates a new ComputerSystemCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerSystemCollection() *ComputerSystemCollection {
	this := ComputerSystemCollection{}
	return &this
}

// NewComputerSystemCollectionWithDefaults instantiates a new ComputerSystemCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerSystemCollectionWithDefaults() *ComputerSystemCollection {
	this := ComputerSystemCollection{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ComputerSystemCollection) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerSystemCollection) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ComputerSystemCollection) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ComputerSystemCollection) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ComputerSystemCollection) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerSystemCollection) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ComputerSystemCollection) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ComputerSystemCollection) SetName(v string) {
	o.Name = &v
}

// GetSystems returns the Systems field value if set, zero value otherwise.
func (o *ComputerSystemCollection) GetSystems() []ComputerSystem {
	if o == nil || o.Systems == nil {
		var ret []ComputerSystem
		return ret
	}
	return *o.Systems
}

// GetSystemsOk returns a tuple with the Systems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerSystemCollection) GetSystemsOk() (*[]ComputerSystem, bool) {
	if o == nil || o.Systems == nil {
		return nil, false
	}
	return o.Systems, true
}

// HasSystems returns a boolean if a field has been set.
func (o *ComputerSystemCollection) HasSystems() bool {
	if o != nil && o.Systems != nil {
		return true
	}

	return false
}

// SetSystems gets a reference to the given []ComputerSystem and assigns it to the Systems field.
func (o *ComputerSystemCollection) SetSystems(v []ComputerSystem) {
	o.Systems = &v
}

func (o ComputerSystemCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Systems != nil {
		toSerialize["systems"] = o.Systems
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ComputerSystemCollection) UnmarshalJSON(bytes []byte) (err error) {
	varComputerSystemCollection := _ComputerSystemCollection{}

	if err = json.Unmarshal(bytes, &varComputerSystemCollection); err == nil {
		*o = ComputerSystemCollection(varComputerSystemCollection)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "systems")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputerSystemCollection struct {
	value *ComputerSystemCollection
	isSet bool
}

func (v NullableComputerSystemCollection) Get() *ComputerSystemCollection {
	return v.value
}

func (v *NullableComputerSystemCollection) Set(val *ComputerSystemCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerSystemCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerSystemCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerSystemCollection(val *ComputerSystemCollection) *NullableComputerSystemCollection {
	return &NullableComputerSystemCollection{value: val, isSet: true}
}

func (v NullableComputerSystemCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerSystemCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


