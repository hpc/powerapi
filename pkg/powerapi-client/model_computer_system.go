/*
 * Power API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: lowell@lanl.gov
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package powerapi

import (
	"encoding/json"
)

// ComputerSystem A single computer system with power state
type ComputerSystem struct {
	// An id is a URI-reference for the object
	Id string `json:"id"`
	// The name is the unique name identifier for the ComputerSystem. This is used to reference the system in the API. 
	Name string `json:"name"`
	PowerState *PowerState `json:"powerState,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ComputerSystem ComputerSystem

// NewComputerSystem instantiates a new ComputerSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerSystem(id string, name string, ) *ComputerSystem {
	this := ComputerSystem{}
	this.Id = id
	this.Name = name
	return &this
}

// NewComputerSystemWithDefaults instantiates a new ComputerSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerSystemWithDefaults() *ComputerSystem {
	this := ComputerSystem{}
	return &this
}

// GetId returns the Id field value
func (o *ComputerSystem) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ComputerSystem) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ComputerSystem) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ComputerSystem) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ComputerSystem) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ComputerSystem) SetName(v string) {
	o.Name = v
}

// GetPowerState returns the PowerState field value if set, zero value otherwise.
func (o *ComputerSystem) GetPowerState() PowerState {
	if o == nil || o.PowerState == nil {
		var ret PowerState
		return ret
	}
	return *o.PowerState
}

// GetPowerStateOk returns a tuple with the PowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputerSystem) GetPowerStateOk() (*PowerState, bool) {
	if o == nil || o.PowerState == nil {
		return nil, false
	}
	return o.PowerState, true
}

// HasPowerState returns a boolean if a field has been set.
func (o *ComputerSystem) HasPowerState() bool {
	if o != nil && o.PowerState != nil {
		return true
	}

	return false
}

// SetPowerState gets a reference to the given PowerState and assigns it to the PowerState field.
func (o *ComputerSystem) SetPowerState(v PowerState) {
	o.PowerState = &v
}

func (o ComputerSystem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.PowerState != nil {
		toSerialize["powerState"] = o.PowerState
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ComputerSystem) UnmarshalJSON(bytes []byte) (err error) {
	varComputerSystem := _ComputerSystem{}

	if err = json.Unmarshal(bytes, &varComputerSystem); err == nil {
		*o = ComputerSystem(varComputerSystem)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "powerState")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComputerSystem struct {
	value *ComputerSystem
	isSet bool
}

func (v NullableComputerSystem) Get() *ComputerSystem {
	return v.value
}

func (v *NullableComputerSystem) Set(val *ComputerSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerSystem(val *ComputerSystem) *NullableComputerSystem {
	return &NullableComputerSystem{value: val, isSet: true}
}

func (v NullableComputerSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


