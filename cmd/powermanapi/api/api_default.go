/*
 * Power API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"AggregationServiceActionsAggregationServiceResetPost",
			strings.ToUpper("Post"),
			"/power/v1/AggregationService/Actions/AggregationService.Reset",
			c.AggregationServiceActionsAggregationServiceResetPost,
		},
		{
			"ComputerSystemsGet",
			strings.ToUpper("Get"),
			"/power/v1/ComputerSystems",
			c.ComputerSystemsGet,
		},
		{
			"ComputerSystemsNameActionsComputerSystemResetPost",
			strings.ToUpper("Post"),
			"/power/v1/ComputerSystems/{name}/Actions/ComputerSystem.Reset",
			c.ComputerSystemsNameActionsComputerSystemResetPost,
		},
		{
			"ComputerSystemsNameGet",
			strings.ToUpper("Get"),
			"/power/v1/ComputerSystems/{name}",
			c.ComputerSystemsNameGet,
		},
	}
}

// AggregationServiceActionsAggregationServiceResetPost - Request aggregate system reset
func (c *DefaultApiController) AggregationServiceActionsAggregationServiceResetPost(w http.ResponseWriter, r *http.Request) {
	aggregationResetBody := &AggregationResetBody{}
	if err := json.NewDecoder(r.Body).Decode(&aggregationResetBody); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.AggregationServiceActionsAggregationServiceResetPost(r.Context(), *aggregationResetBody)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ComputerSystemsGet - Get computer systems
func (c *DefaultApiController) ComputerSystemsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ComputerSystemsGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ComputerSystemsNameActionsComputerSystemResetPost - Request system reset
func (c *DefaultApiController) ComputerSystemsNameActionsComputerSystemResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	name := params["name"]
	resetRequestBody := &ResetRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(&resetRequestBody); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.ComputerSystemsNameActionsComputerSystemResetPost(r.Context(), name, *resetRequestBody)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ComputerSystemsNameGet - Get a specific computer system state
func (c *DefaultApiController) ComputerSystemsNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	name := params["name"]
	result, err := c.service.ComputerSystemsNameGet(r.Context(), name)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
