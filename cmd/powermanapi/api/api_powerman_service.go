/*
 * Power API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	pm "github.com/jlowellwofford/powermanapi/pkg/powerman"
)

const urlBase = "/power/v1"

// PowermanApiService is a service that implents the logic for the DefaultApiServicer
type PowermanApiService struct {
	server string
	port   int
}

// NewPowermanApiService creates a default api service
func NewPowermanApiService(server string, port int) DefaultApiServicer {
	return &PowermanApiService{
		server: server,
		port:   port,
	}
}

func (s *PowermanApiService) connect() (*pm.Connection, error) {
	return pm.Connect(fmt.Sprintf("%s:%d", s.server, s.port), 0)
}

var pmToAPI = map[pm.Status]PowerState{
	pm.PM_ON:  POWERSTATE_ON,
	pm.PM_OFF: POWERSTATE_OFF,
}

// AggregationServiceActionsAggregationServiceResetPost - Request aggregate system reset
func (s *PowermanApiService) AggregationServiceActionsAggregationServiceResetPost(ctx context.Context, aggregationResetBody AggregationResetBody) (ImplResponse, error) {
	// TODO - update AggregationServiceActionsAggregationServiceResetPost with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, AggregationResetBody{}) or use other options such as http.Ok ...
	//return Response(200, AggregationResetBody{}), nil

	//TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	//return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("AggregationServiceActionsAggregationServiceResetPost method not implemented")
}

// ComputerSystemsGet - Get computer systems
func (s *PowermanApiService) ComputerSystemsGet(ctx context.Context) (ImplResponse, error) {
	conn, e := s.connect()
	defer conn.Disconnect()
	if e != nil {
		return Response(http.StatusInternalServerError, nil), errors.New("failed to connect to powerman server:" + e.Error())
	}
	csc := ComputerSystemCollection{
		Id:      urlBase + "/ComputerSystems",
		Name:    "powerman nodes",
		Systems: []ComputerSystem{},
	}
	conn.Reset()
	for {
		n, end := conn.Next()
		if end {
			break
		}
		stat, e := conn.NodeStatus(n)
		if e != nil {
			return Response(http.StatusInternalServerError, nil), errors.New("failed to get node state:" + e.Error())
		}
		csc.Systems = append(csc.Systems, ComputerSystem{
			Id:         urlBase + "/ComputerSystems/" + n,
			Name:       n,
			PowerState: pmToAPI[stat],
		})
	}
	return Response(200, csc), nil
}

// ComputerSystemsNameActionsComputerSystemResetPost - Request system reset
func (s *PowermanApiService) ComputerSystemsNameActionsComputerSystemResetPost(ctx context.Context, name string, resetRequestBody ResetRequestBody) (ImplResponse, error) {
	conn, e := s.connect()
	defer conn.Disconnect()
	if e != nil {
		return Response(http.StatusInternalServerError, nil), errors.New("failed to connect to powerman server:" + e.Error())
	}
	switch resetRequestBody.ResetType {
	case RESETTYPE_FORCE_OFF:
		if e := conn.NodeOff(name); e != nil {
			return Response(http.StatusInternalServerError, nil), errors.New("failed to set node state: " + e.Error())
		}
		return Response(200, ResetRequestBody{ResetType: RESETTYPE_FORCE_OFF}), nil
	case RESETTYPE_FORCE_ON, RESETTYPE_ON:
		if e := conn.NodeOn(name); e != nil {
			return Response(http.StatusInternalServerError, nil), errors.New("failed to set node state: " + e.Error())
		}
		return Response(200, ResetRequestBody{ResetType: RESETTYPE_FORCE_ON}), nil
	case RESETTYPE_FORCE_RESTART, RESETTYPE_POWER_CYCLE:
		if e := conn.NodeCycle(name); e != nil {
			return Response(http.StatusInternalServerError, nil), errors.New("failed to set node state: " + e.Error())
		}
		return Response(200, ResetRequestBody{ResetType: RESETTYPE_POWER_CYCLE}), nil
	case RESETTYPE_GRACEFUL_RESTART, RESETTYPE_PUSH_POWER_BUTTON, RESETTYPE_GRACEFUL_SHUTDOWN, RESETTYPE_NMI:
		return Response(http.StatusNotImplemented, nil), errors.New("operation not supported: " + string(resetRequestBody.ResetType))
	}

	return Response(http.StatusBadRequest, nil), errors.New("unrecognized node state: " + string(resetRequestBody.ResetType))
}

// ComputerSystemsNameGet - Get a specific computer system state
func (s *PowermanApiService) ComputerSystemsNameGet(ctx context.Context, name string) (ImplResponse, error) {
	conn, e := s.connect()
	defer conn.Disconnect()
	if e != nil {
		return Response(http.StatusInternalServerError, nil), errors.New("failed to connect to powerman server:" + e.Error())
	}

	stat, e := conn.NodeStatus(name)
	if e != nil {
		return Response(http.StatusNotFound, nil), errors.New("failed to get node status: " + e.Error())
	}

	return Response(200, ComputerSystem{
		Id:         urlBase + "/ComputerSystems/" + name,
		Name:       name,
		PowerState: pmToAPI[stat],
	}), nil
}
